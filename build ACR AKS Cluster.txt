# https://learn.microsoft.com/en-us/azure/aks/kubernetes-action
# Authenticate with Azure Container Registry (ACR) from Azure Kubernetes Service (AKS)

# Secure traffic between pods using network policies in AKS hybrid
# https://learn.microsoft.com/en-us/azure/aks/use-network-policies

$resourceGroup = "containers"
$acr="eboracr"
$aksClusterName = "eborcluster99"
$subscriptionId = "XXXXXX"

az group create -n $resourceGroup -l "westeurope"
az acr create -n $acr -g $resourceGroup --sku basic
az aks create -n $aksClusterName -g $resourceGroup --generate-ssh-keys --attach-acr $acr  --network-plugin azure --network-policy calico
az aks get-credentials -g $resourceGroup -n $aksClusterName

# Import the Cat & Dog Voting application
az acr import  -n $acr --source mcr.microsoft.com/oss/bitnami/redis:6.0.8 --image azure-vote-back:v1
az acr import  -n $acr --source mcr.microsoft.com/azuredocs/azure-vote-front:v1 --image azure-vote-front:v1

# Import the k8s application manifest
kubectl apply -f .\application.yaml

# Basic demo to show the Network Policies are working
# Deploy a "server" pod.
kubectl run serverpod --image=k8s.gcr.io/e2e-test-images/agnhost:2.33 --labels="app=server" --port=80 --command -- /agnhost serve-hostname --tcp --http=false --port "80"
Write-Host "Server Pod IP =  $(kubectl get pod/serverpod -o jsonpath='{.status.podIP}')"
# Deploy "client" pod. This will drop into a command prompt on the pod.
kubectl run -it clientpod --image=k8s.gcr.io/e2e-test-images/agnhost:2.33 --command -- bash

# Using the "agnhost" testing tool on the client pod, try to connect to the server IP on port 80. The connection should succeed.
/agnhost connect <server-ip>:80 --timeout=3s --protocol=tcp

# Apply a lockdown policy. This only allows traffic into (INGRESS) the server pod if the traffic comes from another pod lablled "client". 
kubectl apply -f .\basicPolicy.yaml

# Try the connection again - this time it should timeout because the "server" only accepts traffic from pods labled "client".
/agnhost connect <server-ip>:80 --timeout=3s --protocol=tcp

# Apply a label to the "client" pod and retry the connection - it should work this time.
kubectl label pod client -n demo app=client

###################################################
# Setup AAD Service Principal for GH authentication
###################################################

# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux
# Use GitHub Actions to connect to Azure

# Create an AAD Application for authentication
$appId = az ad app create --display-name GitHubActionsApp  --query "appId" --output tsv 
$spId = az ad sp create --id $appId --query "id" --output tsv 

az role assignment create --role contributor --subscription $subscription --assignee-object-id  $spId --assignee-principal-type ServicePrincipal --scope /subscriptions/$subscriptionId/resourceGroups/$resourceGroup

# Now create the following Secret in a new environment called "Testing"

AZURE_CREDENTIALS
{
    "clientSecret":   "XXXX",
    "subscriptionId": "XXXX",
    "tenantId":       "XXXX",
    "clientId":       "XXXX",
}





# Network policies replacment??
# https://learn.microsoft.com/en-us/azure/aks/use-pod-security-policies




